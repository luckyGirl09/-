树状图是一种数据结构，它是由n（n>=0）个有限结点组成一个具有层次关系的集合。
把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：
每个结点有零个或多个子结点；没有父结点的结点称为根结点；每一个非根结点有且只有一个父结点；除了根结点外，每个子结点可以分为多个不相交的子树；

树的存储结构
1.双亲表示法：定义结构数组
每个节点包含两个域 一个数据域，一个双亲域（指示本结点的双亲结点在数组中的位置）
//结点结构
typedef struct PTNode{
	TElemType  data;
	int parent;	//双亲位置域
}PTNode;
//树结构
#define MAX_TREE_SIZE  100
typedef struct{
	PTNode nodes[MAX_TREE_SIZE];
	int r,n;	//根节点的位置和节点个数
}PTree;



2.孩子链表表示法
把每个结点的孩子节点排列起来，看成是一个线性表，用单链表存储
则n个结点有n个孩子链表（叶子的孩子链表为空表）。
而n个头指针又组成一个线性表，用顺序表（含n个元素的结构数组）存储。
孩子节点结构：
typedef struct CTNode{
	int child;
	structCTNode *next;
}*ChildPtr;

双亲结点结构：
typedef struct{
	TElemType data;
	ChildPtr firstchild;	//孩子链表头指针
	// int parent;      可以再增加一个双亲结点下标方便找双亲
}CTBox;

树结构：
typdef struct{
	CTBox nodes[MAX_TREE_SIZE];
	int n,r;	//节点数和根节点的位置
}CTree;

3.孩子兄弟表示法（二叉链表表示法）
用二叉链表作为树的存储结构，
链表中每个节点的两个指针域分别指向  第一个孩子节点 和 下一个兄弟节点。
typedef struct CSNode{
	ElemType   data;
	struct CSNode  *firstchild,*nextsibling;
}CSNode,*CSTree;














 

