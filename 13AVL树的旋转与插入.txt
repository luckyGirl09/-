typedef struct AVLNode *Position;
typedef Position AVLTree; 	//AVL树类型
struct AVLNode{
	ElementType Data;	//结点数据
	AVLTree Left;	//指向左子树
	AVLTree Right;	//指向右子树
	int Height;	//树高
};

int Max( int a, int b )
{
	return a >b ?a : b;
}


//左旋转
AVLTree SingleLeftRotation ( AVLTree  A )	/* 注意：A必须有一个左子结点B  将A与B做左单旋，更新A与B的高度，返回新的根结点B */
{
	AVLTree B = A ->Left;
	A ->Left = B -> Right;
	B ->Right = A;
	A -> Height = Max( GetHeight( A ->Left ), GetHeight( A ->Right)) + 1;
	B -> Height = Max( GetHeight( B->Left ), A->Height ) + 1;
	return B;
}


//右旋转
AVLTree SingleRightRotation ( AVLTree  A )	/* 注意：A必须有一个右子结点B  将A与B做右单旋，更新A与B的高度，返回新的根结点B */
{
	AVLTree B = A ->Right;
	A ->Right = B ->Right;
	B ->Left = A;
	A -> Height = Max( GetHeight( A ->Left ), GetHeight( A ->Right)) + 1;
	B -> Height = Max( A->Height, GetHeight( B->Right ) ) + 1;
	return B;
}


// 左右旋转
AVLTree DoubleLeftRightRotation ( AVLTree A )	/* 注意：A必须有一个左子结点B，且B必须有一个右子结点C   将A、B与C做两次单旋，返回新的根结点C */
{ 
	/* 将B与C做右单旋，C被返回 */
	A->Left = SingleRightRotation(A->Left);

	/* 将A与C做左单旋，C被返回 */
	return SingleLeftRotation(A);
}


//右左旋转
AVLTree DoubleRightLeftRotation ( AVLTree A )	/* 注意：A必须有一个右子结点B，且B必须有一个左子结点C   将A、B与C做两次单旋，返回新的根结点C */
{
	/* 将B与C做左单旋，C被返回 */
	A->Right = SingleLeftRotation(A->Right);

	/* 将A与C做右单旋，C被返回 */
	return SingleRightRotation(A);
}

/* 将X插入AVL树T中，并且返回调整后的AVL树 */
AVLTree Insert( AVLTree T , ElementType X)
{
	if( !T )	/* 若插入空树，则新建包含一个结点的树 */
	{
		T = ( AVLTree ) malloc ( sizeof( struct AVLNode));
		T ->Data = X;
		T ->Left = T ->Right = NULL;
	}
	else if(  X < T ->Data  )	/* 插入T的左子树 */
	{
		T -> Left = Insert( T ->Left, X );
		if( GetHeight( T -> Left ) -  GetHeight ( T ->Right ) == 2 )	/* 如果需要左旋 */
		{
			if( X < T -> Left ->Data )
				T = SingleLeftRotation(T);
			else
				T = DoubleLeftRightRotation(T);
	}
	else if( X < T ->Data )	/* 插入T的右子树 */
	{
		T -> Right= Insert( T ->Right, X );
		if( GetHeight( T -> Left ) -  GetHeight ( T ->Right ) == 2 )	/* 如果需要右旋 */
		{
			if ( X > T->Right->Data )
				T = SingleRightRotation(T);
			else
				T = DoubleRightLeftRotation(T);
	}
	/* else X == T->Data，无须插入 */

	// 更新树高
	T->Height = Max( GetHeight(T->Left), GetHeight(T->Right) ) + 1;

	return T;
}	