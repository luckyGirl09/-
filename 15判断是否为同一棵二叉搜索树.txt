二叉查找树（Binary Search Tree）（又：二叉搜索树，二叉排序树）
它或者是一棵空树，或者是具有下列性质的二叉树：
1.若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；
2.若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；
3.它的左、右子树也分别为二叉排序树。

问题：
给定一个插入序列就可以唯一确定一棵二叉搜索树。然而，一棵给定的二叉搜索树却可以由多种不同的插入序列得到。
例如分别按照序列{2, 1, 3}和{2, 3, 1}插入初始为空的二叉搜索树，都得到一样的结果。
于是对于输入的各种插入序列，你需要判断它们是否能生成一样的二叉搜索树。


输入格式:
输入包含若干组测试数据。
每组数据的第1行给出两个正整数N (≤10)和L，分别是每个序列插入元素的个数和需要检查的序列个数。
第2行给出N个以空格分隔的正整数，作为初始插入序列。
最后L行，每行给出N个插入的元素，属于L个需要检查的序列。


输入样例：
	4 2
	3 1 4 2	//初始序列
	3 4 1 2	//待比较的序列
	3 2 4 1	//待比较的序列
	2 1
	2 1
	1 2
	0

求解思路：
把第一行建一个搜索树然后判别其他的树和这个一不一样
1. 表示搜索树
2. 建搜索树
3. 依次判别是否一致

#include <stdio.h>
#include <stdlib.h>
//  搜索树的表示
typedef struct TreeNode *Tree;
struct TreeNode{
	int v;
	Tree Left,Right;
	int flag;
};

Tree MakeTree(int N);
Tree NewNode(V);
Tree Insert( Tree T, int V );
int check( Tree T,int V );
int Judge( Tree T, int N);
void ResetT( Tree T);
void FreeTree( Tree T);

// 程序框架
int main()
{
	int N,L,i;
	Tree T;
	scanf("%d", &N );
	while( N )
	{
		scanf("%d", &L );
		T = MakeTree( N );		//建立一棵树
		for( i = 0; i< L; i++)
		{
			if( Judge( T, N)) printf( "Yes\n");	//判断是否一样
			else printf( "No\n");
			ResetT(T);		//清空flag标记
		}
		FreeTree(T);	//释放这棵树的空间
		scanf( "%d",&N);	//继续输入下一组
	}
	return 0;
}

//建立搜索树
Tree MakeTree( int N )
{
	Tree T;
	int i,V;
	scanf( "%d", &V);
	T = NewNode(V);
	for( i = 1; i<N; i++)
	{
		scanf( "%d",&V);
		T = Insert( T,V);
	}
	return T;
}

Tree NewNode( V )
{
	Tree T = (Tree)malloc( sizeof( struct TreeNode));
	T ->v = V;
	T ->Left = T ->Right = NULL;
	T ->flag = 0;
	return T;
}

Tree Insert( Tree T, int V )
{
	if( !T ) T = NewNode( V );
	else{
		if( V > T ->v)
			T ->Right = Insert( T ->Right, V );
		else
			T ->Left = Insert( T ->Left, V);
	}
	return T;
}

//如何判别
//在树T中按顺序搜索序列中的每个数
//如果每次搜索所经过的结点在前面出现过，则一致、
//否则（某次搜索中遇到前面未出现的结点），则不一致


int check( Tree T,int V )
{
	if( T ->flag ){
		if( V <T ->v) return check( T ->Left, V);
		else if( V > T ->v) return check( T ->Right, V);
		else return 0;
	}
	else{
		if( V == T ->v){
			T ->flag = 1;
			return 1;
		}
		else return 0;
	}
}

int Judge( Tree T, int N)
{
	int i,V,flag = 0;	//0代表目前还一致，1代表不一致了
	scanf("%d",&V);
	if( V != T ->v)  flag = 1;
	else  T ->flag = 1;
	for( i =1; i<N; i++)
	{
		scanf("%d", &V);
		if( (!flag) && (!check( T,V )))  flag = 1;
	}
	if(flag)  return 0;
	else return 1;
}


void ResetT( Tree T)
{
	if( T ->Left ) ResetT(T ->Left);
	if(T ->Right )  ResetT(T ->Right);
	T ->flag =0 ;
}

void FreeTree( Tree T)
{
	if( T ->Left ) FreeTree( T->Left);
	if( T ->Right ) FreeTree( T->Right);
	free(T);
}