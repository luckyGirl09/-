（贪心算法：构造哈夫曼树时首先选择权值小的叶子节点）

哈夫曼算法：
1构造森林全是根
1.根据n个给定的权值构成n棵二叉树的森林F = {T1,T2...Tn},其中Ti只有一个带权结点

2选用两小造新树
2.在F中选取两棵根节点权值最小的树作为左右子树，构造一棵新的二叉树，
且设置新的二叉树的根节点的权值为其左右子树上根节点的权值之和。

3删除两小添新人
3.在F中删除这两棵树，同时将新的二叉树加入到森林中

4重复2.3.剩单根
4.重复2.3，直到森林中只剩一棵树

哈夫曼树只有度为0和度为2的结点，没有度为1的结点
包含n个叶子结点的哈夫曼树中共有   2n - 1 个结点（因为包含n棵树的森林要经过n-1次合并才能形成哈夫曼树，共产生 n-1 个新节点，这n-1个都是度为2的结点）

#include <stdio.h>
//采用顺序存储结构 -- 一维结构数组
//结点类型定义
typedef struct {
    int weight;
    int parent,lch,rch;
}HTNode, *HuffmanTree;
//哈夫曼树中共有2n-1个节点，不使用0下标，数组大小为2n

/*
实现：
1.初始化HT[1...2n-1]：lch = rch = parent = 0;
2.输入初始n个叶子节点：置HT[1...n]的weight值；
3.进行以下n-1次合并，依次产生n-1个结点HT[i]，i=n+1 到 2n-1
	①在HT[1...i-1]中选两个parent==0的weight值最小的两个节点
	HT[s1]和HT[s2],s1,s2作为两个最小节点的下标
	②修改HT[s1]和HT[s2]的parentz值：HT[s1].parent = i; HT[s2].parent = i;
	③修改新产生的HT[i]
	HT[i].weight = HT[s1].weight + HT[s2].weight ;
	HT[i].lch = s1;HT[i].rch = s2;
*/;
void CreatHuffmanTree( HuffmanTree HT, int n) 	//构造哈夫曼树
{
	int m;
	if(n<=1)   return;
	m = 2*n - 1;	//数组 一共2n-1个元素
	HT = new HTNode[m+1];	//0号单元未使用，HT[m]表示根节点
	for( i=1; i<=m; i++)
	{
		HT[i].lch = 0;	//将2n-1个元素的lch,rch,parent置0
		HT[i].rch = 0;
		HT[i].parent = 0;
	}
	for(i = 1; i <n; i++)
	{
		scanf("%d", HT[i].weight);   //输入前n个元素的weight值
	}
	for(i = n+1; i<=m; i++)
	{
		Select(HT,i-1,s1,s2);
		HT[s1].parent = i;   HT[s2].parent = i;
		HT[i].lch = s1;HT[i].rch = s2;
		HT[i].weight = HT[s1].weight + HT[s2].weight ;
	}
	return  0;
}

	
	
	












