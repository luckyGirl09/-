串的顺序存储结构：
#define MAXLEN 255
typedef struct{
	char ch[MAXLEN + 1];	//存储串的一维数组，下标从0开始（研究算法时从1开始）
	int length;			//串的当前长度
}SString;


串的链式存储结构：(块链结构)
#define CHUNKSIZE 80	//块的大小自定义
typedef struct Chunk{
	char ch[CHUNKSIZE];
	struct Chunk *next;
}Chunk;

typedef struct{
	Chunk *head,*tail;		//串的头指针和尾指针
	int curlen;			//串的当前长度
}LString;			//字符串的块链结构

串：内容受限的线性表（有限序列），每个元素只能是字符
串中字符的个数叫做串长。

重点：串的模式匹配算法：确定主串中所含子串第一次出现的位置
S：主串     T：子串（模式串）
BF算法：从S的每一个字符开始依次与T的字符进行匹配，
	若相等，继续逐个比较后续字符，
	若不等，则从主串的下一字符起，重新与模式串的第一个字符比较
	若成功则返回第一个字符的序号，失败返回0

int Index_BF( SString  S, SString  T ){
	int  i = 1, j = 1;
	while( i <= S.length && j <= T.length){
		if( S.ch[i] = T.ch[j]){
			++i;	//主串和子串依次匹配下一个字符
			++j;
		}
		else{
			i = i - j + 2;	//回溯
			j = 1;	
		}
	}
	if( j >= T.length )  return  i - T.length;	//返回第一个字符下标
	else  return 0;
}


KMP算法："KMP"算法相比于"BF"算法，优势在于：

在保证指针 i 不回溯的前提下，当匹配失败时，让模式串向右移动最大的距离；
并且可以在O(n+m)的时间数量级上完成对串的模式匹配操作；
故，"KMP"算法称为“快速模式匹配算法”。


int  Index_KMP( SString  S,  SString  T, int pos ){
	i = pos,j=1;
	while( i <= S.length && j <= T.length ){
		if( j == 0 || S.ch[i] == T.ch[j]){
			++i;
			++j;
		}
		else  j = next[j];	//i不变，j后退
	}
	if( j > T.length )  return   i - T.length;
	else return 0;
}

void get_next ( SString T, int &next[]){
	i = 1; next[1] = 0; j = 0;
	while( i< T.length){
		if( j == 0 || T.ch[i] == T.ch[j]){
			++i;
			++j;
			next[i] = j;
		}
		else   	j = next[j];
	}
}
	

