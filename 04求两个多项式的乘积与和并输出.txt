#include <stdio.h>
#include  <stdlib.h>

/*
已知两个多项式，分别求乘积与和并输出。
1. 	3x^4 - 5x^2 + 6x - 2
2.	5x^20 - 7x^4 + 3x

题意理解
设计函数分别求两个一元多项式的乘积与和
###输入样例:
4 3 4 -5 2 6 1 -2 0       //4表示一共有几项   然后系数指数成对出现
3 5 20 -7 4 3 1

###输出样例:
15 24 -25 22 30 21 -10 20 -21 8 35 6 -33 5 14 4 -15 3 18 2 -6 1 5 20 -4 4 -5 2 9 1 -2 0
*/
 // 多项式的表示：
typedef struct PolyNode *Polynomial;
struct PolyNode
{
	int coef;
	int expon;
	Polynomial link;
};

Polynomial ReadPoly(); 
void Attach( int c, int e, Polynomial *pRear );
Polynomial  PolyAdd (Polynomial P1, Polynomial P2);
Polynomial Mult( Polynomial P1, Polynomial P2 );
void PrintPoly( Polynomial P );
int Compare(int a, int b);

int main()
{
	Polynomial P1,P2,PP,PS;
	P1 = ReadPoly();		// 读多项式
	P2 = ReadPoly();
	PP = Mult(P1,P2);		//相乘
	PrintPoly(PP);
	PS = PolyAdd(P1,P2);		//相加
	PrintPoly(PS);		//输出
	
	return 0;
}

Polynomial ReadPoly()
{
	Polynomial P,Rear,t;
	int c,e,N;
	P = (Polynomial) malloc (sizeof(struct PolyNode));		//链表头空结点
	P -> link = NULL;
	Rear = P;
	scanf("%d" , &N);
	while(N--)
	{
		scanf("%d %d",&c,&e);
		if(c != 0)
		Attach(c,e,&Rear);		//将当前项插入多项式尾部
	}
	t = P;P = P->link;free(t);		//删除临时生成的头结点
	return P;
}

void Attach(int c, int e, Polynomial *pRear )
{
	Polynomial P;
	P = (Polynomial) malloc (sizeof(struct PolyNode));		//为新结点分配空间
	P -> coef = c;	//为新结点赋值
	P ->expon = e;
	P ->link = NULL;
	(*pRear) ->link = P;
	*pRear = P;	//修改pRear的值
}

Polynomial  PolyAdd (Polynomial P1, Polynomial P2) { 
//两个多项式相加函数  
	Polynomial front, rear, temp; //要返回头，所以要记录结果多项式的头和尾 
 	int sum;  
 	rear = (Polynomial) malloc(sizeof(struct PolyNode));  
 //为方便表头插入，先产生一个临时空结点作为结果多项式链表头   
	 rear->link=NULL; 
 	front = rear;        /* 由front 记录结果多项式链表头结点 */   
 	while ( P1 && P2 )  /* 当两个多项式都有非零项待处理时 */  
 	switch ( Compare(P1->expon, P2->expon) ) { 
  	case 1:  //P1中的数据项指数较大 
  	Attach( P1->coef, P1->expon, &rear);   //拷贝到结果表达式  
  	P1 = P1->link; //指向p1中非零项的指针向后移  
  	break;  
  	case -1:   //P2中的数据项指数较大    
  	Attach(P2->coef, P2->expon, &rear);   
  	P2 = P2->link;  
  	break;  
  	case 0:   //指数相同  
  	sum =P1->coef+P2->coef;       //系数相加      
  	if ( sum ) //相加后的结果不为零  
  	Attach(sum, P1->expon, &rear);             
  	P1 = P1->link; //p1,p2中指向非零项的指针都往后移             
  	P2 = P2->link;            
  	break; 
}//循环退出，所以有一个为空  
 /* 将未处理完的另一个多项式的所有节点依次复制到结果多项式中去 */ 
//已经退出了 
   	while ( P1 && P2 )  
   	for ( ; P1; P1 = P1->link ) //是p1还剩非零项   
   	Attach(P1->coef, P1->expon, &rear);   
   	for ( ; P2; P2 = P2->link )   
   	Attach(P2->coef, P2->expon, &rear);   
   	rear->link = NULL;  //处理完后将尾项指针指向空   
   	temp = front;   
   	front = front->link; /*令front指向结果多项式第一个非零项 */   
   	free(temp);            /* 释放临时空表头结点 */   
   	return front;
} 

/*
如何将两个多项式相乘方法:

1.将乘法运算转换为加法运算
将P1当前项(ci,ei)乘P2多项式，再加到结果多项式里
t1 =P1;t2= P2;
P = (Polynmial) malloc (sizeof(struct PolyNode)); P->link = NULL;Rear= P;
while (t2) {
	Attach(t1->coef*t2->coef, t1->expon+t2->expon, &Rear);
	t2 = t2->link;
}

2.逐项插入
将P1当前项(c1,e1)乘P2当前项(c2,e2)，并插入到结果多项式中。关键是要找到插入位置
初始结果多项式可由P1第一项乘P2获得 (如上)
*/

Polynomial Mult(Polynomial P1, Polynomial P2)
{
	Polynomial P, Rear,t1,t2,t;
	int c,e;
	if(!P1 || !P2) return NULL;
	t1 =P1; t2 = P2;
	P = (Polynomial) malloc (sizeof(struct PolyNode)); 
	P ->link = NULL;
	Rear = P;
	while(t2) 		//先用p1 的第一项乘以p2的每一项 得到P
	{
		Attach(t1 ->coef * t2 ->coef, t1 ->expon + t2 ->expon, &Rear);
		t2 = t2 ->link;
	}
	t1 = t1->link;
	while(t1)
	{
		t2 = P2; Rear = P;
		while(t2)
		{
			e = t1->expon + t2 ->expon;
			c =  t1 ->coef * t2 ->coef;
			while(Rear ->link && Rear ->link ->expon >e)
				Rear = Rear ->link;	
			if(Rear ->link && Rear ->link ->expon == e)
			{
				if(Rear ->link ->coef +c)
					Rear ->link ->coef += c;
			else{
				t =Rear ->link;
				Rear ->link = t ->link;
				free(t);
			}
			}
			else{
				t = (Polynomial) malloc (sizeof(struct PolyNode));
				t ->coef  = c; t ->expon = e;
				t ->link = Rear ->link;
				Rear ->link = t;  Rear = Rear ->link;
			}
			t2 = t2 ->link;
		}
		t1 = t1 ->link;
	}
	t2 = P; P = P->link; free(t2);

	return P;
}  

void PrintPoly(Polynomial P)
{
	int flag = 0;
	
	if(!P){
		printf("0 0\n");
		return;
	}
	while(P)
	{
		if(!flag)
			flag = 1;
		else  printf(" ");
		printf("%d %d",P->coef, P->expon);
		P = P->link;
	}
	printf("\n");
}

int Compare(int a, int b){  
  if(a>b) return 1;    
  else if(a<b) return -1;    
  else return 0;
}	 