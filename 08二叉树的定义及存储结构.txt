二叉树（Binary Tree）特点是每个结点最多只能有两棵子树，且有左右之分

1.结点的度：一个结点拥有子树的数目称为结点的度
2.叶子结点：也称为终端结点，没有子树的结点或者度为零的结点
3.树的度：树中所有结点的度的最大值
4.结点的层次：从根结点开始，假设根结点为第1层，根结点的孩子结点为第2层，
依此类推，如果某一个结点位于第L层，则其孩子结点位于第L+1层
5.树的深度：也称为树的高度，树中所有结点的层次最大值称为树的深度


性质：
性质1：二叉树的第i层上至多有2i-1（i≥1）个节点
性质2：深度为h的二叉树中至多含有2h-1个节点
性质3：若在任意一棵二叉树中，有n个叶子节点，有n2个度为2的节点，则必有n0=n2+1
性质4：具有n个节点的完全二叉树深为log2x+1（其中x表示不大于n的最大整数）
性质5：若对一棵有n个节点的完全二叉树进行顺序编号（1≤i≤n），那么，对于编号为i（i≥1）的节点：
	当i=1时，该节点为根，它无双亲节点 。
	当i>1时，该节点的双亲节点的编号为i/2  。
	若2i≤n，则有编号为2的左孩子，否则没有左孩子 。
	若2+1≤n，则有编号为2i+1的右孩子，否则没有右孩子 。


二叉树的存储方式：
1.顺序存放在数组中。将一个完全二叉树按照从上到下从左到右的层序给每个节点编号
按编号的顺序存放在数组中
对于非完全二叉树则要转换成二叉树的形式，不存在的节点存储空值
C语言描述如下：
#define MAXSIZE 100
typedef char ElemType;
typedef struct{
	ElemType BT[MAXSIZE];
	int btnum;
}SeqBT;

2.链式存储
二叉树的链式存储结构是指，用链表来表示一棵二叉树，即用链来指示元素的逻辑关系。
通常的方法是链表中每个结点由三个域组成，数据域和左右指针域，左右指针分别用来给出该结点左孩子和右孩子所在的链结点的存储地址
其中，data域存放某结点的数据信息；lchild与rchild分别存放指向左孩子和右孩子的指针，当左孩子或右孩子不存在时，相应指针域值为空（用符号∧或NULL表示）。
利用这样的结点结构表示的二叉树的链式存储结构被称为二叉链表。


typedef chat ElemType;
typedef struct node{
	ElemType data;
	struct node *lchild;
	struct node *rchild;
}BTreeNode;

为了方便访问某结点的双亲（节点的子节点和父节点），还可以给链表结点增加一个双亲字段parent,用来指向其双亲结点。每个结点由四个域组成，
这种存储结构既便于查找孩子结点，又便于查找双亲结点；但是，相对于二叉链表存储结构而言，它增加了空间开销。
利用这样的结点结构表示的二叉树的链式存储结构被称为三叉链表。

typedef chat ElemType;
typedef struct node{
	ElemType data;
	struct node *lchild;
	struct node *rchild;
	struct node *parent;
}BTreeNode;


补充：在含有n个结点的二叉链表中，必有2n个链域
除根结点外，每个结点有且仅有一个双亲，所以只含有n-1个结点的链域存放指针
所以空指针域有2n-(n-1) = n+1个



























































































































